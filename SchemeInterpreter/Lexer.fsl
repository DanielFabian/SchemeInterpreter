{
module Lexer
 
open System
open Parser
open Microsoft.FSharp.Text.Lexing

let lexeme = LexBuffer<_>.LexemeString
let trun count (s:string) = 
    s.Substring count

}

let digit       = ['0'-'9']
let symbol      = ['!' '#' '$' '%' '&' '|' '*' '+' '-' '/' ':' '<' '=' '>' '?' '@' '^' '_' '~' ]
let letter      = ['a'-'z' 'A'-'Z']
let atom        = (letter | symbol) (letter | digit | symbol)*
let whitespace  = ' ' | '\t'
let newline     = '\n' | '\r' '\n'
let integer     = '-'? digit+
let binInteger  = "#b" ['0' '1']+
let octInteger  = "#o" ['0'-'7']+
let hexInteger  = "#x" ['0'-'9' 'a'-'f' 'A'-'F']+
let decInteger  = "#d" ['0'-'9']+
let float       = digit+ '.' digit+


rule token = parse
    | whitespace                        { token lexbuf }
    | newline                           {
                                            lexbuf.EndPos <- lexbuf.EndPos.NextLine
                                            token lexbuf
                                        }
    | '\''                              { QUOTE }
    | "("                               { LPAREN }
    | ")"                               { RPAREN }
    | "."                               { DOT }
    | "#t"                              { BOOL(true) }
    | "#f"                              { BOOL(false) }
    | integer                           { INT (Convert.ToInt32 (lexeme lexbuf, 10)) }
    | binInteger                        { INT (Convert.ToInt32 (trun 2 <| lexeme lexbuf, 2)) }
    | octInteger                        { INT (Convert.ToInt32 (trun 2 <| lexeme lexbuf, 8)) }
    | decInteger                        { INT (Convert.ToInt32 (trun 2 <| lexeme lexbuf, 10)) }
    | hexInteger                        { INT (Convert.ToInt32 (trun 2 <| lexeme lexbuf, 16)) }
    | float                             { FLOAT (Convert.ToDouble (lexeme lexbuf)) }
    | atom                              { ID (lexeme lexbuf) }
    | "\""                              { STRING (string lexbuf.StartPos "" lexbuf) }
    | eof                               { EOF }
and string pos s = parse
    | "\\" ('"' | 'n' | 'r' | 't')      {
                                            let s' = s + (match lexeme lexbuf with
                                                | "\\\""    -> "\""
                                                | "\\n"     -> "\n"
                                                | "\\r"     -> "\r"
                                                | "\\t"     -> "\t"
                                                | "\\\\"    -> "\\"
                                                | _ -> "")
                                            string pos s' lexbuf
                                        }
    | "\""                              { s }
    | "\n"                              {
                                            lexbuf.EndPos <- lexbuf.EndPos.NextLine
                                            string pos (s + "\n") lexbuf
                                        }
    | eof                               { failwithf "end of file in string started at or near %A" pos }
    | _                                 { string pos (s + (lexeme lexbuf)) lexbuf }